// grid-gutters.scss
// Gutter extension for grids
// @requires essential/grid.css
// @author eFBe


@import '../../mixin/_splitter';
// Might be a good idea to store the gutter size theme-wise
@import '../../theme/tron/essential/_global-variables';


.grid-row {
	&.gutter {
		padding-right: split-half($grid-gutter-width);
		padding-left: split-half($grid-gutter-width);

		.column {
			padding-right: split-half($grid-gutter-width);
			padding-left: split-half($grid-gutter-width);
		}
	}


	// Nesting is fun...

	&.no-gutter {
		padding-right: 0;
		padding-left: 0;

		.column {
			padding-right: 0;
			padding-left: 0;
		}

		.grid-row {
			padding-right: 0;
			padding-left: 0;
		}

		// ...and redundant
		.gutter {
			padding-right: split-half($grid-gutter-width);
			padding-left: split-half($grid-gutter-width);

			.column {
				padding-right: split-half($grid-gutter-width);
				padding-left: split-half($grid-gutter-width);
			}

			// ...and redundant
			.no-gutter .column {
				padding-right: 0;
				padding-left: 0;
			}
		}
	}


	// A touch of responsiveness: reset everything
	// Also makes the gutters vertical
	// And because I don't want to play with nesting again everything is !important
	// scss-lint:disable ImportantRule

	@media only screen and (max-width: $breakpoint-mobile) {
		&.gutter {
			padding-right: $grid-gutter-width !important;
			padding-left: $grid-gutter-width !important;

			.column {
				padding: 0 0 $grid-gutter-width !important;

				// even reset the nested rows
				.gutter {
					padding: 0 !important;
				}

				// nested last block already has a bottom gutter from its parent
				.column:last-of-type {
					padding-bottom: 0 !important;
				}
			}
		}
	}
}