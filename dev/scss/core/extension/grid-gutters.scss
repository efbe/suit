// grid-gutters.scss
// Gutter extension for grids
// @requires grid.css
// @author eFBe


@import '../../mixin/_splitter';
// Might be a good idea to store the gutter size theme-wise
@import '../../theme/tron/essential/_global-variables';


.grid-row {
	&.gutter {
		padding-right: split-half($grid-gutter-width);
		padding-left: split-half($grid-gutter-width);

		.column {
			padding-right: split-half($grid-gutter-width);
			padding-left: split-half($grid-gutter-width);

			// Lovely nesting - this removes gutter redundancy
			.gutter {
				padding-right: 0;
				padding-left: 0;
			}
		}
	}


	// If you want to nest a gutter-less layout into another one with gutters

	&.no-gutter {
		padding-right: 0;
		padding-left: 0;

		.column {
			padding-right: 0;
			padding-left: 0;
		}

		.grid-row {
			padding-right: 0;
			padding-left: 0;
		}
	}


	// If you need gutters but not on the sides
	// Please use it carefully, I'm not sure about nesting at this point

	&.stick-to-left {
		padding-right: 0;
		padding-left: 0;

		.column:first-of-type {
			margin-left: -(split-half($grid-gutter-width));
		}

		.grid-row {
			.column:first-of-type {
				margin-left: 0;
			}

			.grid-row {
			//
			}
		}
	}


	// A touch of responsiveness: reset everything
	// Also makes the gutters vertical

	@media only screen and (max-width: 639px) {
		&.gutter {
			padding-right: $grid-gutter-width;
			padding-left: $grid-gutter-width;

			.column {
				padding: 0 0 $grid-gutter-width;

				// even reset the nested rows
				.gutter {
					padding: 0;
				}

				// nested last block already has a bottom gutter from its parent
				.column:last-of-type {
					padding-bottom: 0;
				}
			}
		}
	}
}